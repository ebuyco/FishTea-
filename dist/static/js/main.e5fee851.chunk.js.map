{"version":3,"sources":["helpers.js","components/StorePicker.js","components/Header.js","components/Order.js","components/Inventory.js","components/App.js","components/NotFound.js","components/Router.js","serviceWorker.js","index.js"],"names":["random","arr","Math","floor","length","getFunName","adjectives","StorePicker","myInput","React","createRef","goToStore","event","preventDefault","storeName","current","value","props","history","push","className","onSubmit","this","type","ref","required","placeholder","defaultValue","Component","Header","tagline","Order","Inventory","App","age","NotFound","Router","exact","path","component","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAOO,SAASA,EAAOC,GACnB,OAAOA,EAAIC,KAAKC,MAAMD,KAAKF,SAAWC,EAAIG,SAcvC,SAASC,IACZ,IAAMC,EAAa,CACf,WACA,YACA,QACA,OACA,UACA,QACA,YACA,WACA,OACA,cACA,gBACA,QACA,SACA,YACA,UACA,YACA,QACA,aACA,SACA,WACA,cACA,SACA,SACA,WACA,QACA,UACA,OACA,aACA,UACA,YACA,UACA,YACA,QACA,cACA,UACA,WAoCJ,MAAM,GAAN,OAAUN,EAAOM,GAAjB,YAAgCN,EAAOM,GAAvC,YAAsDN,EAjCxC,CACV,QACA,MACA,WACA,QACA,OACA,SACA,SACA,OACA,QACA,SACA,SACA,QACA,QACA,QACA,SACA,WACA,WACA,QACA,OACA,QACA,SACA,aACA,WACA,YACA,QACA,SACA,SACA,YACA,WACA,U,ICzDOO,E,2MA9BPC,QAAUC,IAAMC,Y,EAEhBC,UAAY,SAAAC,GAERA,EAAMC,iBACH,IAAMC,EAAY,EAAKN,QAAQO,QAAQC,MAC1C,EAAKC,MAAMC,QAAQC,KAAnB,iBAAkCL,K,wEAItC,OACI,0BACAM,UAAU,iBACVC,SAAUC,KAAKX,WAEX,oDACA,2BACAY,KAAK,OACLC,IAAKF,KAAKd,QACViB,UAAQ,EACRC,YAAY,aACZC,aAActB,MAEd,4BAAQkB,KAAK,UAAb,2B,GAzBUd,IAAMmB,WCgBjBC,EAhBA,SAAAZ,GAAK,OAChB,4BAAQG,UAAU,OACd,oCAEI,0BAAMA,UAAU,SAChB,0BAAMA,UAAU,MAAhB,MACA,0BAAMA,UAAU,OAAhB,SAGA,wBAAIA,UAAU,WACV,8BAAOH,EAAMa,YCHdC,E,iLANP,OACI,yBAAKX,UAAU,SAAf,gB,GAHQX,IAAMmB,WCOXI,E,iLAJP,OAAO,yBAAKZ,UAAU,aAAf,mB,GAFSX,IAAMmB,WCgBfK,E,iLAZT,OACE,yBAAKb,UAAU,oBACb,yBAAKA,UAAU,QACX,kBAAC,EAAD,CAAQU,QAAQ,uBAAuBI,IAAK,OAElD,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GARUzB,IAAMmB,WCGTO,EANE,kBACT,6BACI,0DCqBGC,EAnBA,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACAC,OAAK,EAACC,KAAK,IACXC,UAAWhC,IAEX,kBAAC,IAAD,CACA+B,KAAK,iBACLC,UAAWN,IAEX,kBAAC,IAAD,CACAM,UAAWJ,O,MCNHK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCONC,iBAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SDwGrC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e5fee851.chunk.js","sourcesContent":["export function formatPrice(cents) {\n    return (cents / 100).toLocaleString(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\"\n    });\n}\n\nexport function random(arr){\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function slugify(text){\n    return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\")\n}\n\nexport function getFunName(){\n    const adjectives = [\n        \"adorable\",\n        \"beautiful\",\n        \"clean\",\n        \"drab\",\n        \"elegant\",\n        \"fancy\",\n        \"glamorous\",\n        \"handsome\",\n        \"long\",\n        \"magnificent\",\n        \"old-fashioned\",\n        \"plain\",\n        \"quaint\",\n        \"sparkling\",\n        \"ugliest\",\n        \"unsightly\",\n        \"angry\",\n        \"bewildered\",\n        \"clumsy\",\n        \"defeated\",\n        \"embarrassed\",\n        \"fierce\",\n        \"grumpy\",\n        \"helpless\",\n        \"itchy\",\n        \"jealous\",\n        \"lazy\",\n        \"mysterious\",\n        \"nervous\",\n        \"obnoxious\",\n        \"panicky\",\n        \"repulsive\",\n        \"scary\",\n        \"thoughtless\",\n        \"uptight\",\n        \"worried\"\n    ];\n\n    const nouns = [\n        \"women\",\n        \"men\",\n        \"children\",\n        \"teeth\",\n        \"feet\",\n        \"people\",\n        \"leaves\",\n        \"mice\",\n        \"geese\",\n        \"halves\",\n        \"knives\",\n        \"wives\",\n        \"lives\",\n        \"elves\",\n        \"loaves\",\n        \"potatoes\",\n        \"tomatoes\",\n        \"cacti\",\n        \"foci\",\n        \"fungi\",\n        \"nuclei\",\n        \"syllabuses\",\n        \"analyses\",\n        \"diagnoses\",\n        \"oases\",\n        \"theses\",\n        \"crises\",\n        \"phenomena\",\n        \"criteria\",\n        \"data\"\n    ];\n\n    return `${random(adjectives)}-${random(adjectives)}-${random(nouns)}`;\n}","import React from \"react\";\nimport {getFunName} from '../helpers';\n\nclass StorePicker extends React.Component {\n\n        myInput = React.createRef();\n\n        goToStore = event => {\n\n            event.preventDefault();\n               const storeName = this.myInput.current.value;\n            this.props.history.push(`/store/${storeName}`);\n         }\n\n    render(){\n        return(\n            <form \n            className=\"store-selector\"\n            onSubmit={this.goToStore}\n             >\n                <h2>Please Enter A Store</h2>\n                <input \n                type=\"text\"\n                ref={this.myInput}\n                required\n                placeholder=\"Store Name\" \n                defaultValue={getFunName()}\n                />\n                <button type=\"submit\">Visit Store â†’</button>\n\n            </form>\n        );\n    }\n}\n\nexport default StorePicker;","import React from 'react';\n\n\nconst Header = props => (\n    <header className=\"top\">\n        <h1>\n            Catch\n            <span className=\"ofThe\">\n            <span className=\"of\">Of</span>\n            <span className=\"the\">The</span>    \n              </span>\n        </h1>\n            <h3 className=\"tagline\">\n                <span>{props.tagline}</span>    \n            </h3>    \n    </header>\n\n);\n\nexport default Header;","import React from 'react';\n\nclass Order extends React.Component {\n    render(){\n        return(\n            <div className=\"order\">Order!!!</div>\n        )\n    }\n}\n\nexport default Order;","import React from 'react';\n\n\nclass Inventory extends React.Component{\n    render(){\n        return <div className=\"inventory\">Inventory!!</div>\n    }\n}\n\nexport default Inventory;","import React from \"react\";\nimport Header from './Header';\nimport Order from './Order';\nimport Inventory from './Inventory';\n\nclass App extends React.Component{\n    render(){\n      return(\n        <div className=\"catch-of-the-day\">\n          <div className=\"menu\">\n              <Header tagline=\"Fresh Seafood Market\" age={100}/>\n          </div>\n        <Order/>\n        <Inventory/>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","import React from 'react';\n\nconst NotFound = () => (\n        <div>\n            <h2>404 Page Not Found !!!!!</h2>\n        </div>\n);\n\nexport default NotFound;","import React from 'react';\nimport { BrowserRouter, Route, Switch} from 'react-router-dom';\nimport StorePicker from \"./StorePicker\";\nimport App from \"./App\";\nimport NotFound from \"./NotFound\";\n\nconst Router = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route \n            exact path=\"/\"\n            component={StorePicker}\n            />\n            <Route\n            path=\"/store:storeId\"\n            component={App}\n            />\n            <Route\n            component={NotFound}\n            />    \n        </Switch>  \n    </BrowserRouter>\n\n);\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './css/style.css';\n// import App from './components/App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n// serviceWorker.unregister();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// import React from \"react\";\n// import { render } from \"react-dom\";\n// import Router from \"./components/Router\";\n// import \"./css/style.css\";\n// render(<Router />, document.querySelector(\"#main\"));\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport Router from \"./components/Router\"\nimport './css/style.css';\n// import App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<Router />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}